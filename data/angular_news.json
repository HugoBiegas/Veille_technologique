{
  "last_updated": "2025-10-16T12:56:50.703893+00:00",
  "total_articles": 72,
  "articles": [
    {
      "id": "efc8e093aa93fdb0",
      "title": "How to animate transitions with Angular?",
      "description": "In Angular 20.2, CSS animations for transitions have evolved with a fairly simple API.Let‚Äôs dive into it.How to animate a new element entering the screen?Here is an example of animation for an element entering the screen:The first thing to know is that animations are 100% driven by CSS. If you‚Äôre not familiar with CSS animations, you can use the CSS animation generator mentioned in this post.Note that AI tools can also assist you in generating proper CSS animations. In the case of the example ab",
      "url": "https://blog.angulartraining.com/how-to-animate-transitions-with-angular-66bad6d0dae2?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-10-15T08:47:55+00:00",
      "niche": "angular",
      "score": 68,
      "keywords": []
    },
    {
      "id": "31d9b289aebc6f11",
      "title": "Angular‚Äôs Game-Changing Dynamic Component Features: inputBinding(), outputBinding(), and twoWayBinding()",
      "description": "Master the new APIs that make dynamic component creation cleaner, type-safe, and developer-friendly Ever struggled with creating dynamic components in Angular and wished there was a cleaner, more intuitive way? ü§î If you've been working with Angular's dynamic components using ComponentFactory or ViewContainerRef, you know the pain of verbose code, complex event handling, and the constant worry about memory leaks. Well, Angular 20 just dropped some absolute game-changers that will make you rethink",
      "url": "https://dev.to/codewithrajat/angulars-game-changing-dynamic-component-features-inputbinding-outputbinding-and-1aof",
      "source": "This is Angular",
      "author": "Rajat",
      "published": "2025-10-14T13:30:00+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "9ffe1f6d48482bd0",
      "title": "I built this to simplify date range selection in Angular 17+. If you‚Äôre an Angular dev, try it out and let me know what features you‚Äôd love next! Star it on GitHub if you‚Äôd like to support the project ‚ù§Ô∏è üîó https://github.com/toozuuu/ngxsmk-datepicker",
      "description": "Angular 20: De la programaci√≥n imperativa a la creaci√≥n declarativa de componentes din√°micos Antonio Cardenas for Angular Firebase „Éª Oct 9 #angular #webdev #spanish #frontend GitHub - toozuuu/ngxsmk-datepicker: A powerful, modern, highly customizable Angular date range picker with time component. A powerful, modern, highly customizable Angular date range picker with time component. - toozuuu/ngxsmk-datepicker github.com",
      "url": "https://dev.to/toozuuu/i-built-this-to-simplify-date-range-selection-in-angular-17-if-youre-an-angular-dev-try-it-out-4c26",
      "source": "This is Angular",
      "author": "Sachin Dilshan",
      "published": "2025-10-14T20:12:04+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "59ec57a3014d5e0a",
      "title": "Regarding the use of PrimeNG: the impact of its license on commercial applications",
      "description": "1.What is the situation with the License? (It is under the MIT License in the STS state.) 2.Can I continue using without purchasing LTS, with all functions remaining unaffected? 3.Will a Warning Message appear without purchasing LTS? Friends, who knows about these? Please help explain, thank you.",
      "url": "https://dev.to/shanshhub/regarding-the-use-of-primeng-the-impact-of-its-license-on-commercial-applications-52n5",
      "source": "This is Angular",
      "author": "Roronoa Zoro",
      "published": "2025-10-15T05:49:16+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "3fbb284772e04d65",
      "title": "Ng-News 25/41: Future Testing Framework: Vitest or Jest?",
      "description": "Several PRs point to Vitest as Angular‚Äôs next test runner. But what does the team say officially? Mark Thompson clarifies. üß™ Future Testing Frameworks The testing tooling situation in Angular is up for a change. This isn‚Äôt totally new. Back in Angular 16, the team introduced an experimental Jest mode - intended to be the alternative to Jasmine & Karma. Additionally, because Karma is deprecated, the plan has long been to replace it (or at least shift) with Web Test Runner or similar. That was the",
      "url": "https://dev.to/this-is-angular/ng-news-2541-future-testing-framework-vitest-or-jest-3cpc",
      "source": "This is Angular (Dev.to)",
      "author": "ng-news",
      "published": "2025-10-15T21:05:13+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "db8af747183acbc2",
      "title": "Angular CLI MCP Server Guide",
      "description": "The Angular team has added something that changes how AI can help with your projects: an MCP server built into the CLI that provides everything from live documentation access to code modernization tools and interactive tutoring. Instead of relying on potentially stale training data, your AI can now actively query Angular's documentation, search through curated code examples, and access official best practices. The Model Context Protocol (MCP) acts as a bridge, letting your AI assistant tap into ",
      "url": "https://dev.to/this-is-angular/angular-cli-mcp-server-guide-3jj5",
      "source": "This is Angular (Dev.to)",
      "author": "Gergely Szerovay",
      "published": "2025-10-16T08:47:37+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "a0ee3f16951b75f5",
      "title": "Essential Angular SSR Config To Deploy On Vercel",
      "description": "The world of web development is constantly evolving, with a strong emphasis on performance, user experience, and efficient deployment. Angular, a powerful framework for building dynamic web applications, has embraced Server-Side Rendering (SSR) to address these demands, offering benefits like faster initial page loads and improved SEO. However, integrating Angular SSR with platforms like Vercel requires special configuration. The creation of a new Angular application, is really straight forward,",
      "url": "https://dev.to/this-is-angular/essential-angular-ssr-config-to-deploy-on-vercel-2lka",
      "source": "This is Angular (Dev.to)",
      "author": "Giorgio Boa",
      "published": "2025-10-16T09:57:01+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "088918cde590521d",
      "title": "Master RxJS Error Handling Once and for All ‚Äî 3 Core Strategies You Should Know",
      "description": "As developers, we often focus too much on the happy path ‚Äî the perfect scenario where everything works smoothly and no API ever fails. But in the real world, one tiny error can derail your entire app from its destination. Error handling in RxJS is one of those underrated concepts that even experienced Angular devs struggle with. In this post (and the video linked below), I‚Äôll break down 3 core strategies that can help you design a clean, scalable, and resilient RxJS Error Handling Architecture. ",
      "url": "https://dev.to/frontdecoder/master-rxjs-error-handling-once-and-for-all-3-core-strategies-you-should-know-2e43",
      "source": "This is Angular",
      "author": "Seyed Amir Mehrizi",
      "published": "2025-10-14T07:45:46+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "74aa37d7737b4e38",
      "title": "Angular Component Lifecycle: Mastering the 11-Step Sequence (Code Examples Included)",
      "description": "\"As developers, we need precision. This guide details the exact 11-step lifecycle sequence of an Angular component, straight from the official docs. We'll show you when to check content vs. the view, why certain hooks run repeatedly, and the critical cleanup step to eliminate memory leaks.\" The Angular lifecycle is the engine of your application. Ignoring the proper order leads to runtime errors and performance issues. Let's look at the complete chain, focusing on the most critical distinctions.",
      "url": "https://dev.to/devhabib/angular-component-lifecycle-mastering-the-11-step-sequence-code-examples-included-24m8",
      "source": "This is Angular",
      "author": "Md Habibur Rahman",
      "published": "2025-10-14T05:54:42+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "0699de89915a1247",
      "title": "11 Best Angular Courses to Learn in 2026",
      "description": "The first time I opened the Angular docs, I felt completely lost. Components, services, observables, dependency injection ‚Äî it all seemed like too much just to build a simple UI. But once I built my first Angular dashboard that fetched live data from an API, it finally clicked. Angular wasn‚Äôt about quick hacks ‚Äî it was about structure, scalability, and patterns that make sense when large teams build apps together. In 2026, Angular remains one of the most reliable and in-demand frameworks in web ",
      "url": "https://dev.to/stack_overflowed/11-best-angular-courses-to-learn-in-2026-34me",
      "source": "This is Angular",
      "author": "Stack Overflowed",
      "published": "2025-10-14T05:21:28+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "2f8f72d71aec436a",
      "title": "Understanding app.config.ts in Angular 19 Standalone Applications ‚Äî A Complete Guide",
      "description": "In this article, we‚Äôll deep-dive into every line of a real-world app.config.ts file that integrates: Angular Standalone APIs PrimeNG theming (Lara theme) NgRx Store + Effects + DevTools HTTP Client with Fetch Markdown rendering (ngx-markdown + PrismJS highlighting) Zone optimization for better performance By the end, you‚Äôll understand how to structure, configure, and optimize your Angular 19 standalone app configuration file like a pro. The Complete app.config.ts Code Here‚Äôs the full configurati",
      "url": "https://dev.to/prateek_kr/understanding-appconfigts-in-angular-19-standalone-applications-a-complete-guide-5coh",
      "source": "This is Angular",
      "author": "Prateek Kr",
      "published": "2025-10-13T11:37:18+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "43940931d274cdce",
      "title": "Privacy, Data Handling, and Regulatory Compliance in Angular Applications",
      "description": "Modern web applications collect, process, and transmit significant amounts of user data. In Angular projects, developers must handle this data responsibly to comply with privacy regulations such as GDPR (General Data Protection Regulation) and CCPA (California Consumer Privacy Act). Beyond legal requirements, secure handling of personally identifiable information (PII) builds user trust and prevents reputational damage. This article explores best practices for privacy and compliance in Angular a",
      "url": "https://dev.to/lavi_kumar_2088/privacy-data-handling-and-regulatory-compliance-in-angular-applications-592f",
      "source": "This is Angular",
      "author": "Lavi Kumar",
      "published": "2025-10-13T06:43:00+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "543c3fb66401d41a",
      "title": "üÖ∞Ô∏è Angular Fundamentals: Mastering Component Communication with @Input and @Output",
      "description": "Component communication is a core skill for building scalable Angular applications. While there are many ways to share data (services, RxJS), the most fundamental and robust method for direct interaction between components is the Parent-Child pattern using @Input and @Output. This pattern enforces Unidirectional Data Flow, making your applications more predictable and easier to debug. 1. Passing Data Down: The @Input() Decorator The @Input() decorator allows a parent component to inject data int",
      "url": "https://dev.to/devhabib/angular-fundamentals-mastering-component-communication-with-input-and-output-177l",
      "source": "This is Angular",
      "author": "Md Habibur Rahman",
      "published": "2025-10-13T05:21:54+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "92bed099035343e6",
      "title": "What Building Employee Atlas Taught Me About Real Full Stack Development",
      "description": "Introduction Employee Atlas is an employee management application I built to help companies manage their teams more efficiently. The idea came from noticing how many workplaces still rely on spreadsheets or scattered tools to handle basic employee tasks. I wanted to create something that feels modern, centralized, and easy to use. With Employee Atlas, companies can hire or remove employees, review leave and clock in requests, and approve promotions or role changes without getting lost in paperwo",
      "url": "https://dev.to/haris_sejmenovic/what-building-employee-atlas-taught-me-about-real-full-stack-development-2a83",
      "source": "This is Angular",
      "author": "Haris Sejmenovic",
      "published": "2025-10-12T22:36:52+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "165256924cac00c1",
      "title": "üöÄ Unlocking Productivity: AI Tools Every Angular Developer Should Know",
      "description": "What if building Angular apps could be faster, easier, and more fun? Imagine having an AI coding assistant right by your side ‚Äî helping you avoid bugs, write cleaner code, and speed up your workflow. This article explores how AI is changing the game for Angular developers. From smart code suggestions to tools that catch errors before they become problems, AI is making Angular development smoother and more productive. Get ready to discover how these new tools and techniques can save time and make",
      "url": "https://dev.to/karol_modelski/unlocking-productivity-ai-tools-every-angular-developer-should-know-1fj",
      "source": "This is Angular",
      "author": "Karol Modelski",
      "published": "2025-10-12T07:00:00+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "8894a7c215aaf29b",
      "title": "Selectorless Components in Angular 20+: The Secret Agents of the Modern Framework",
      "description": "Hey Angular community! üëã I recently discovered something that changed how I think about Angular architecture: components don't need selectors anymore. This isn't just a clever trick - it represents Angular's evolution from a template-bound framework to a composition-first rendering engine. In this article, we'll explore: @Component({ standalone: true, // No selector! template: `I'm a free component!` }) Key takeaways: How Ivy enables this pattern Selectorless vs Services (crucial difference!) Re",
      "url": "https://dev.to/nurrehman/selectorless-components-in-angular-20-the-secret-agents-of-the-modern-framework-4dfk",
      "source": "This is Angular",
      "author": "Nadeem Ur-Rehman",
      "published": "2025-10-11T16:34:27+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "83abae316a3f6084",
      "title": "Ng-News 25/40: Q&A on Zoneless, @angular/aria (???)",
      "description": "Andrew Scott shares new insights on zoneless, and why he doesn't expect a big performance boost. Plus, a mysterious new @angular/aria package appears with over 350 file changes. üß† Q&A on Zoneless The monthly Q&A session took place. As always, Mark Thompson was the host and he was joined by Andrew Scott, who has been leading the zoneless project. Here are the main takeaways: Andrew doesn‚Äôt expect huge performance improvements from going zoneless, unless the application is truly enormous. He sees ",
      "url": "https://dev.to/this-is-angular/ng-news-2540-qa-on-zoneless-angulararia--1ocm",
      "source": "This is Angular (Dev.to)",
      "author": "ng-news",
      "published": "2025-10-09T19:22:26+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "c15375530915247e",
      "title": "Angular support for generating apps in Google AI Studio is now available",
      "description": "Author: Mark (Techson) ThompsonWe‚Äôre overjoyed to announce that you can now generate Angular apps using the power of Google AI Studio.We know that developers are embracing AI and code generation as a part of their daily workflows. Whether it is generating code to prototype a new app experience for your users or getting help on your existing projects ‚Äî AI is there in the process. We want to ensure that Angular is in the places where developers are building.This was a collaborative effort between ",
      "url": "https://blog.angular.dev/angular-support-for-generating-apps-in-google-ai-studio-is-now-available-3a3afde38f58?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-10-02T17:43:53+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "3886cf9e367805ea",
      "title": "Beyond the Horizon: How Angular is Embracing AI for Next-Gen Apps",
      "description": "Author: Simona Cotin, Sr. Engineering Manager AngularWe hope you enjoyed watching the Angular + AI Developer event on YouTube where we were able to announce the new Web Codegen Scorer tool. This post goes more into details on how the tool came about and the story for Angular and generative AI in general.As developers like you embed artificial intelligence in their workflows, what does that mean for the framework? What does that mean for the future of development? While we can‚Äôt predict the futur",
      "url": "https://blog.angular.dev/beyond-the-horizon-how-angular-is-embracing-ai-for-next-gen-apps-7a7ed706e1a3?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-09-16T16:01:49+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "718038e272b5c7d1",
      "title": "Angular Summer Update 2025",
      "description": "Authors: Jens Kuehlers Mark TechsonAs summer reaches its peak, the Angular team wants to share some updates from the latest minor releases.Since launching Angular v20 in May, the team has been hard at work shipping new features and improvements in v20.1 and v20.2. We are continuing our mission to boost developer productivity and help you create apps your users will love. As part of that mission, we‚Äôve also expanded our AI offerings to enhance your development workflow.HighlightsZoneless APIs are",
      "url": "https://blog.angular.dev/angular-summer-update-2025-1987592a0b42?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-08-29T20:51:40+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "56527af29db0113b",
      "title": "The Angular Custom Profiling Track is now available",
      "description": "Authors: Mark Thompson Pawel KozlowskiProfiling web applications can be a complex task, often requiring developers to juggle between different tools that present data in disconnected ways. Traditionally, Chrome‚Äôs performance panel is excellent for detailed function call analysis, while Angular DevTools offers a higher-level view based on framework concepts like components, lifecycle hooks, bindings etc. Unfortunately, having two separate tools leads to a fragmented understanding of performance.T",
      "url": "https://blog.angular.dev/the-angular-custom-profiling-track-is-now-available-0f9d8d36218a?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-07-02T19:38:06+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "6b1ac8d3070244b9",
      "title": "Announcing Angular v20",
      "description": "The past couple of years have been transformative for Angular, as we‚Äôve unleashed major advancements like reactivity with Signals and the power of Zoneless applications. We hope these features have helped the Angular community build the next generation of web applications with fast time-to-market and robust performance.And we are just getting started! Angular v20 is our latest release where we have spent countless hours polishing some of our in-progress features for the rock-solid developer expe",
      "url": "https://blog.angular.dev/announcing-angular-v20-b5c9c06cf301?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Minko Gechev",
      "published": "2025-05-28T18:33:28+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "ba401f03af1eb9aa",
      "title": "Build AI-Powered Apps With Genkit and Angular",
      "description": "There has never been a better time to start building with AI and the state-of-the-art models available to developers everywhere. Building with AI is for everyone, especially web developers. The Firebase team at Google has just launched the 1.0 version of Genkit for Node.js which means that it is ready for production and ready to help you build the next generation of AI powered applications.What is Genkit?Genkit is a framework designed to help you build AI-powered applications and features. It pr",
      "url": "https://blog.angular.dev/build-ai-powered-apps-with-genkit-and-angular-707db8918c3a?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-03-18T03:15:07+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "f90fe0ed517f862d",
      "title": "Seamless data fetching with httpResource",
      "description": "Photo by Jamie Street on UnsplashFantastic new APIs are coming to Angular. Two years ago, we proposed making Angular a reactive web framework powered by signals. Since then, the team has shipped a number of signal-based features in the framework: reactive primitives like signal & computed, reactive inputs including model, signal queries, bidirectional RxJS conversion utilities, and migration tooling.We have a solid foundation for reactivity in Angular. Now, we‚Äôre ready to begin the next phase of",
      "url": "https://blog.angular.dev/seamless-data-fetching-with-httpresource-71ba7c4169b9?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Matthieu Riegler",
      "published": "2025-03-07T15:02:52+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "176bceba64e5c319",
      "title": "Angular 19.2 Is Now Available",
      "description": "And we‚Äôre back with Angular‚Äôs latest minor release, version 19.2, bringing new APIs and experimental features to empower developers on their next great app.Expanding reactivity beyond synchronousIn Angular v19 we released the experimental resource API, continuing our reactivity story to a new chapter ‚Äî asynchronous reactivity.With this release, we‚Äôre thrilled to introduce two significant updates: asynchronous reactivity with the new httpResource and resource streaming with rxResource APIs.Develo",
      "url": "https://blog.angular.dev/angular-19-2-is-now-available-673ec70aea12?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-03-05T16:55:07+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "98679d8cec292720",
      "title": "Micro Frontends with Angular and Native Federation",
      "description": "Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care of.There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder str",
      "url": "https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Manfred Steyer",
      "published": "2025-02-10T15:02:31+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "3357b3beaf480b78",
      "title": "Angular 2025 Strategy",
      "description": "For the past two and a half years, we‚Äôve been laser focused on improving developer experience and performance for all Angular developers. In this post, I‚Äôd like to share a brief summary of the high-level process that we‚Äôve been following to achieve this and describe our strategy for 2025.The tech industry evolves rapidly. For example, it was hard to predict the magnitude of the GenAI revolution until a couple of years ago. This makes it very difficult and impractical to create a fixed plan for A",
      "url": "https://blog.angular.dev/angular-2025-strategy-9ca333dfc334?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Minko Gechev",
      "published": "2025-01-14T00:01:41+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "08300ebea075d0c1",
      "title": "Dynamic component creation with Angular",
      "description": "Recently, I‚Äôve covered different architecture options to control a dialog component. All these options had the component in place in the DOM and used some external trigger to show or hide the component‚Äôs template.But what about creating a component and rendering it on demand? Of course, we have lazy-loading and the @defer block, but what if we want to decide which component to display at runtime, or even better, can replace that component on-demand with Typescript code?Enter ViewContainerRefA vi",
      "url": "https://blog.angulartraining.com/dynamic-component-creation-with-angular-f81bae0109ab?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-09-17T09:17:35+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "a12f96d55b88d597",
      "title": "Component architecture with inputs, model(), and viewChild()",
      "description": "I get asked a lot about best practices in terms of Angular architecture. As a result, in this post, I want to showcase three different ways to achieve the same kind of component communication in Angular, highlighting the pros and cons of each approach.The example we‚Äôll be working on is the following, where two components (a main component and a dialog component) communicate to open and close a dialog:First approach: Inputs and outputsIn this first attempt, my dialog component is entirely driven ",
      "url": "https://blog.angulartraining.com/component-architecture-with-inputs-model-and-viewchild-a236a48b461f?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-08-20T17:45:46+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "7526558beec60ed2",
      "title": "How to use the new Signal Graph in the Angular Dev Tools?",
      "description": "Angular 20.1 introduced a new experimental feature that displays a dynamic Signal graph of all Signal dependencies for a given component.In this brief tutorial, we'll explore how to access the graph and what type of information it displays.What are the requirements for using Signal Graph?Your application needs to be upgraded to Angular 20.1 or later and use the latest version of Chrome or Firefox.How to open the Signal Graph?With your Angular application running in development mode, open Chrome ",
      "url": "https://blog.angulartraining.com/how-to-use-the-new-signal-graph-in-the-angular-dev-tools-b5b8a0ace6dd?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-07-31T10:53:15+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "1ab6b3d6eba6d883",
      "title": "What does Zoneless Angular mean?",
      "description": "With the release of Angular 20, the buzz around zoneless Angular applications has increased quite a bit. That‚Äôs because Zoneless is no longer an experimental feature, as it has been promoted to developer preview, the final step before becoming stable.A world of Zoneless Angular code, according to AISo, what is Zoneless? I‚Äôve explained before that Angular relies on a library called Zone.js to perform change detection. The idea is that any event in the browser (such as a click, a Promise that reso",
      "url": "https://blog.angulartraining.com/what-does-zoneless-angular-mean-0a3a9d2a047d?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-06-11T21:42:32+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "4bf62cab12465d33",
      "title": "The Angular Compiler: From Your Code to Browser Code",
      "description": "If you‚Äôve ever wondered what Angular does with your component code and what actually ends up in the browser, this article is for you!First, if you want to look at the resulting code after the compiler does its work, you can run ng serve, then open dist/project-name/browser/main-xxxxx.js, where xxxxx is a unique hash generated by the compiler, such as main-5ABRQQ7A.js.This hash is present for cache-busting purposes. When you deploy a new app version, your main.js file gets a new unique name, forc",
      "url": "https://blog.angulartraining.com/the-angular-compiler-from-your-code-to-browser-code-9b20ac2cbac6?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-05-07T19:29:08+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "c5e5549b10854de2",
      "title": "Signals + HTTP = httpResource [Tutorial]",
      "description": "Angular 19.2 brought an experimental new API called httpResource. I published a tutorial about rxResource a few months ago, and httpResource is a new, more polished layer on top of that.Let‚Äôs start with the basics. Signals are slowly making their way across all APIs of the Angular framework, which begs the question: How do we use the Angular HttpClient with Signals, since the HttpClient returns an Observable?A simple answer would be to use the toSignal function:signal = toSignal(this.http.get(\"h",
      "url": "https://blog.angulartraining.com/signals-http-httpresource-tutorial-bf8792e9bda0?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-04-16T22:50:55+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "feb7f857d5ac0d1c",
      "title": "Custom styling in Angular Material 19+",
      "description": "I‚Äôve written about the Angular CDK before and how to create custom themes using the Angular Material Theme Generator.With Angular Material v19, custom styling has become much more manageable.If you navigate to the documentation of any component, you‚Äôll notice a new tab called ‚Äústyling‚Äù, as shown here for the button component:What‚Äôs nice about that new approach is that it‚Äôs based on mixin overrides for different types of components. That‚Äôs great if your goal is to change something for all instanc",
      "url": "https://blog.angulartraining.com/custom-styling-in-angular-material-19-9d15846af0b0?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-04-03T02:10:35+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "7a6bab0609b716d8",
      "title": "Angular Reactivity with ngModel, model(), and Signals",
      "description": "Sometimes, the best parts of the Angular framework are the ones that aren‚Äôt even documented. You try something out, and it works beautifully, almost better than expected.For instance, I was wondering if I could use ngModel with signals. Would the 2-way data-binding work that way?So I did this:@Component({ selector: 'app-root', imports: [FormsModule], template: ` <h1>Hello from {{ name() }}!</h1> <input type=\"text\" [(ngModel)]=\"name\" /> `,})export class App { name = signal('Angular');}And it work",
      "url": "https://blog.angulartraining.com/angular-reactivity-with-ngmodel-model-and-signals-96072fe0d39e?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Alain Chautard",
      "published": "2025-02-26T22:57:48+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "abd52d19e2f733ed",
      "title": "Complex Angular forms with validation",
      "description": "Sometimes forms in Angular can be a pain, and some of us have been struggling with them since the beta phases of Angular2. First there was only the template driven forms approach, and then later on the Angular core team introduced Reactive forms. Both solutions still exist today, but the community sold Reactive forms as a best practice and they basically told us to stay away from template driven forms. The reasoning behind this was: Reactive forms are easier to unit-test. Less chance of 2-way da",
      "url": "https://blog.brecht.io/complex-angular-forms-with-validation/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-09-19T00:00:00+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "83c2dd9cadc2a93f",
      "title": "Conditional api urls in Angular with injection tokens",
      "description": "Using env.js files When we deploy our Angular application, chances are big that we will let our data-access layer connect to another api url than the one we connect to in development. This means that this api url should be configurable at some point. There are multiple ways of working with environment variables in Angular code-bases. I like to choose for a simple env.js file that can easily be replaced by the continuous integration (read this article). This way the env.js file is never really pa",
      "url": "https://blog.brecht.io/conditional-api-urls-in-angular-with-injection-tokens/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-09-08T00:00:00+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "514ba90f4953c2c7",
      "title": "Routed Angular dialogs",
      "description": "This article should be a rather short one. It‚Äôs about how we can create dialogs in Angular. Using dialogs in Angular can be tackled in complex ways but can be easy as well. When I started out with Angular I created this article. This is already 6 years ago at the time of writing this, and I believe there are better solutions now. Come to think of it‚Ä¶ There already were.",
      "url": "https://blog.brecht.io/routed-angular-dialogs/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-08-31T00:00:00+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "0521292d3920889d",
      "title": "Angular interview questions for catching senior talent",
      "description": "Companies ask me to take care of technical interviews from time to time. Having done quite a lot of these interviews, I learned a lot from them. By helping out a lot of different clients, I also have been on the other side of the table more than a few times too. This means I have learned some patterns on how to create a positive impression towards my interviewer, and I know how to estimate the candidate as well. I don‚Äôt like to ask for technical assessments because I value the time of the candid",
      "url": "https://blog.brecht.io/angular-interview-questions-for-seniors/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-08-12T00:00:00+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "4891d241ad1815f0",
      "title": "Angular Addicts #42: Signal Forms API, AI powered apps with Angular & more",
      "description": "üëãHey fellow Angular Addict This is the 42nd issue of the Angular Addicts Newsletter, a monthly collection of carefully selected Angular resources that caught my attention. (Here are the 40th, 39th and 38th) üì¢ Release announcements üì∞ What‚Äôs new in Angular 20.3? By C√©dric Exbrayat üö¶ Signal forms Angular v21-next releases introduce the new experimental Signal Forms API. üì∞ All About Angular's New Signal Forms By Manfred Steyer üì∞ Angular Signal Forms: The most awaited feature is here By Elisa Schnabe",
      "url": "https://dev.to/this-is-angular/angular-addicts-42-signal-forms-api-ai-powered-apps-with-angular-more-477n",
      "source": "This is Angular (Dev.to)",
      "author": "Gergely Szerovay",
      "published": "2025-10-07T07:18:19+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "cbdff8ab59b9e76b",
      "title": "A Comprehensive Guide to State Management with Vanilla Angular",
      "description": "Photo by Shutter Speed on Unsplash State management in Angular has come a long way. From raw Observables in global services, to modern and modular stores such as the signal store, passing by heavier Redux implementations: the Angular ecosystem has seen many ways of managing state. However, since the last few major releases, Angular now also has a different kind of reactive variable with signals. With them, we now have a synchronous and reactive way to interact with and react to our data, things ",
      "url": "https://dev.to/this-is-angular/a-comprehensive-guide-to-state-management-with-vanilla-angular-5a59",
      "source": "This is Angular (Dev.to)",
      "author": "Pierre Bouillon",
      "published": "2025-10-06T06:00:00+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "950c6bcae8f5a939",
      "title": "Seamless Synergy: Hosting Your Angular App on Firebase",
      "description": "In the world of web development, building dynamic and engaging user interfaces often leads developers to powerful frameworks like Angular. Known for its robust structure, component-based architecture, and excellent tooling, Angular empowers the creation of complex applications. But once your masterpiece is coded, the next crucial step is making it accessible to the world. This is where Firebase Hosting steps in, offering a remarkably simple, fast, and secure solution for deploying your Angular a",
      "url": "https://dev.to/this-is-angular/seamless-synergy-hosting-your-angular-app-on-firebase-144i",
      "source": "This is Angular (Dev.to)",
      "author": "Giorgio Boa",
      "published": "2025-10-03T14:47:20+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "fb3a213abfa5c4aa",
      "title": "Ng-News 25/39: LCP Explained, Various Content on Signal Forms",
      "description": "LCP decides how fast your site feels. Julian Jandl breaks down what it is, how it works, and what to do if it‚Äôs too slow. üìä Understanding LCP ‚Äì Largest Contentful Paint Julian Jandl from Push-Based has published a detailed article on the performance metric LCP ‚Äì Largest Contentful Paint. It‚Äôs one of the three Core Web Vitals by Google, the other two being INP (Interaction to Next Paint) and CLS (Cumulative Layout Shift). LCP is important because it measures when the largest visible element on th",
      "url": "https://dev.to/this-is-angular/ng-news-2539-lcp-explained-various-content-on-signal-forms-1mf6",
      "source": "This is Angular (Dev.to)",
      "author": "ng-news",
      "published": "2025-10-03T13:33:02+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "4bd6af726919db71",
      "title": "Angular - For Loop Optimizations",
      "description": "In my recent article about Senior Angular Interview Questions, I mentioned a section about optimizing forloops with the trackmethod. However, I also pointed out that the choice of value you use for tracking really matters. Even if you add track, it might not actually make your rendering more performant if used incorrectly. This article expands on that section with additional explanation and examples. The track function is a useful performance optimization that was often overlooked with the old *",
      "url": "https://dev.to/this-is-angular/angular-ngfor-optimizations-519b",
      "source": "This is Angular (Dev.to)",
      "author": "Eduard Krivanek",
      "published": "2025-10-02T17:58:46+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "e6d6afbe9f111d2c",
      "title": "Ng-News 25/38: Angular + AI Developer Event, S1ngularity Strikes Again",
      "description": "Google showcased new AI tools for Angular - from tutors to scoring systems. Minko Gechev, Angular product lead, moves to a new position. S1ngularity supply-chain attack is back. AI Developer Event ‚Äì Angular & Gemini The Angular + AI Developer Event happened, where they showcased several AI-driven tools that can help us when developing Angular applications. The session was hosted by Mark Thompson, and each tool was presented by a guest speaker. üîç Web Codegen Scorer Web Codegen Scorer is a benchma",
      "url": "https://dev.to/this-is-angular/ng-news-2538-angular-ai-developer-event-s1ngularity-strikes-again-3bah",
      "source": "This is Angular (Dev.to)",
      "author": "ng-news",
      "published": "2025-09-26T12:55:08+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "fd74cb437d82f542",
      "title": "Unit Testing Angular Components Made Simple",
      "description": "Photo by Christopher Gower on UnsplashContinue reading on Angular Training ¬ª",
      "url": "https://blog.angulartraining.com/unit-testing-angular-components-made-simple-012450ef8a81?source=rss----8725e60f0d54---4",
      "source": "Angular Training Blog",
      "author": "Mohammad Rajpura",
      "published": "2025-03-13T03:32:20+00:00",
      "niche": "angular",
      "score": 26,
      "keywords": []
    },
    {
      "id": "55012e9bd5ff944f",
      "title": "Simple Angular dialogs with the Angular CDK",
      "description": "The goal of this article",
      "url": "https://blog.brecht.io/simple-angular-dialogs-with-the-cdk/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-09-27T00:00:00+00:00",
      "niche": "angular",
      "score": 26,
      "keywords": []
    },
    {
      "id": "336bdbf60685ab3b",
      "title": "Reactive dumb components",
      "description": "Reactive dumb components",
      "url": "https://blog.brecht.io/reactive-dumb-components/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2021-05-17T00:00:00+00:00",
      "niche": "angular",
      "score": 26,
      "keywords": []
    },
    {
      "id": "18592af880cfe635",
      "title": "Managing state in Angular",
      "description": "About this article",
      "url": "https://blog.brecht.io/managing-state-in-angular/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2019-07-29T00:00:00+00:00",
      "niche": "angular",
      "score": 26,
      "keywords": []
    },
    {
      "id": "b1f9edfabebd29d2",
      "title": "Angular Authentication Guards",
      "description": "What are Authentication Guards? Authentication Guards are used to protect routes and control access based on user authentication status. They intercept route navigation request and ensures that only authorized users can access certain parts of an application. This feature is used for authentication, authorization and role based access control(RBAC). Implementing Authentication Guards:- CanActivate Guard determines [&#8230;] The post Angular Authentication Guards first appeared on TO THE NEW Blog",
      "url": "https://www.tothenew.com/blog/angular-authentication-guards/",
      "source": "TO THE NEW Angular",
      "author": "Jagriti",
      "published": "2024-04-29T09:57:18+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "c454929c882ff741",
      "title": "Enhancing JavaScript Coding with AI: Using Visual Studio Code",
      "description": "In the rapidly evolving software development landscape, technologies like Artificial Intelligence (AI) are revolutionizing traditional workflows, making them more efficient and productive. For JavaScript programmers, integrating AI tools into their preferred development environment, such as Visual Studio Code (VS Code), can significantly enhance the coding experience. In this blog post, we&#8217;ll explore how JavaScript developers [&#8230;] The post Enhancing JavaScript Coding with AI: Using Vi",
      "url": "https://www.tothenew.com/blog/enhancing-javascript-coding-with-ai-using-visual-studio-code/",
      "source": "TO THE NEW Angular",
      "author": "Mahendra Kumar Agrawal",
      "published": "2024-04-28T04:59:14+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "7b64d9cf478aafd5",
      "title": "Is Currying in JavaScript, A Chain of Functions?",
      "description": "In this article, we are going to discuss &#8220;Is Currying in JavaScript a Chain of Functions?&#8220;. Here, we will see how currying works like a chain of functions and how it will be useful for developers. We will also see the conversion of an existing function into the current version. Let&#8217;s start our topic, i.e., [&#8230;] The post Is Currying in JavaScript, A Chain of Functions? first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/is-currying-in-javascript-a-chain-of-functions/",
      "source": "TO THE NEW Angular",
      "author": "Akash Yadav",
      "published": "2024-04-18T05:18:21+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "3adb3628f5885e7b",
      "title": "When to use Promises and Observables in Angular",
      "description": "One of the most confusing scenarios is whether I should use a promise or an observable. &#160; Have you ever worked with both Promises and Observable? Or maybe you‚Äôve heard of them but don‚Äôt know which one to use at what time? To avoid this confusion, we need to understand their differences to pick the [&#8230;] The post When to use Promises and Observables in Angular first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/when-to-use-promises-and-observables-in-angular/",
      "source": "TO THE NEW Angular",
      "author": "Guddu Kumar",
      "published": "2024-04-16T06:27:23+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "d3f328cc9a205b7e",
      "title": "JavaScript Frameworks: Choosing the Right One for Your Projects",
      "description": "Choosing the right JavaScript framework or library for your web development projects can be crucial. React, Angular, and Vue.js are three of the most popular choices in this domain, each with its own strengths and use cases. Let&#8217;s delve into a comparison of React, Angular, and Vue.js to help you understand their differences and make [&#8230;] The post JavaScript Frameworks: Choosing the Right One for Your Projects first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/javascript-frameworks-choosing-the-right-one-for-your-projects/",
      "source": "TO THE NEW Angular",
      "author": "Mahendra Kumar Agrawal",
      "published": "2024-04-16T05:46:59+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "176eb80db2f4c6c2",
      "title": "JavaScript Programming using ChatGPT",
      "description": "JavaScript programming takes a lot of development time because it&#8217;s always changing, and its unique features make learning and managing code a challenge. But ChatGPT can help you become more productive. Here are the different ways to use ChatGPT for JavaScript development. 1. Understand the given code. Due to the changing nature of JavaScript, it [&#8230;] The post JavaScript Programming using ChatGPT first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/javascript-programming-using-chatgpt/",
      "source": "TO THE NEW Angular",
      "author": "Mahendra Kumar Agrawal",
      "published": "2024-03-24T13:12:41+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "fd75ec8ed032c481",
      "title": "Node Version Using .nvmrc",
      "description": "Introduction When we are working with multiple Node.js and React.js projects, managing different Node versions will be very challenging. There is a tool that is simple and powerful that saves us from version-related problems which is the .nvmrc file. This tool ensures that every React.js and node.js project uses the right node version. Here we [&#8230;] The post Node Version Using .nvmrc first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/node-version-using-nvmrc/",
      "source": "TO THE NEW Angular",
      "author": "Najmuddin Kaishar",
      "published": "2024-03-06T04:00:08+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "c156972268ba45d1",
      "title": "Concept of Angular FormArray",
      "description": "In the world of web development, creating forms is a common task. Forms allow users to interact with a website by inputting data, submitting requests, and more. Angular, a popular JavaScript framework, provides a robust solution for building dynamic forms with the FormArray feature. FormArray allows developers to handle dynamic form controls seamlessly, catering to scenarios [&#8230;] The post Concept of Angular FormArray first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/concept-of-angular-formarray/",
      "source": "TO THE NEW Angular",
      "author": "Mahendra Kumar Agrawal",
      "published": "2024-02-28T13:01:53+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "09d3f50c96430113",
      "title": "Exploring Angular 17: Unlocking Performance with Deferrable Views",
      "description": "In the fast-paced world of web development, delivering seamless user experiences and lightning-fast performance is paramount. Enter @defer, a hidden gem in Angular‚Äôs arsenal that empowers you to achieve both with its on-demand loading magic. Imagine a feature-rich application brimming with functionality. Each component adds value, but some might not be relevant to every user [&#8230;] The post Exploring Angular 17: Unlocking Performance with Deferrable Views first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/exploring-angular-17-unlocking-performance-with-deferrable-views/",
      "source": "TO THE NEW Angular",
      "author": "Kashif Ali Khan",
      "published": "2024-02-27T13:00:43+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "219aadb414e6e1fd",
      "title": "Unleashing the Power of Standalone Components in Angular",
      "description": "A standalone component in Angular is a new way to define and organize components in Angular applications. It breaks away from the traditional approach of using NgModules and offers several advantages in terms of simplicity, maintainability, and performance. What is a standalone component? An independent, self-contained unit of code that encapsulates logic, data, and UI [&#8230;] The post Unleashing the Power of Standalone Components in Angular first appeared on TO THE NEW Blog.",
      "url": "https://www.tothenew.com/blog/unleashing-the-power-of-standalone-components-in-angular/",
      "source": "TO THE NEW Angular",
      "author": "Kashif Ali Khan",
      "published": "2024-01-13T08:32:54+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "042e4899bcdf4e8a",
      "title": "Dynamic Forms: Building a Form Generator with Signal Forms",
      "description": "Dies ist Beitrag 2 von 2 der Serie ‚ÄúSignal Forms‚Äù All About Angular&#8217;s New Signal Forms Dynamic Forms: Building a Form Generator with Signal Forms Dynamic Forms built by a form generator have quite a history in Angular. Such form generators enable us to build a form at runtime using metadata, such as field names [&#8230;] The post Dynamic Forms: Building a Form Generator with Signal Forms appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/dynamic-forms-building-a-form-generator-with-signal-forms/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-10-05T17:23:52+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "7c2d9c4c6732de19",
      "title": "Investigating Code Quality: Crime Scene++",
      "description": "Code analysis is more complex than ever. We could argue this is due to the advent of tools like Claude Code, Cursor, and their peers. That makes it even more important to grasp a codebase quickly. To help with that, I‚Äôve added new tools and metrics to Detective to surface anti-patterns and identify hotspots faster. [&#8230;] The post Investigating Code Quality: Crime Scene++ appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/crime-scene/",
      "source": "Angular Architects",
      "author": "Murat Sari",
      "published": "2025-09-30T09:29:00+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "cff97623f663f023",
      "title": "All About Angular‚Äôs New Signal Forms",
      "description": "Dies ist Beitrag 1 von 1 der Serie ‚ÄúSignal Forms‚Äù All About Angular&#8217;s New Signal Forms Dynamic Forms: Building a Form Generator with Signal Forms The long-awaited Signal Forms bridge a crucial gap between Angular's new reactive side and user interaction. While currently experimental and intended to gather initial feedback, they offer a window into [&#8230;] The post All About Angular&#8217;s New Signal Forms appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/all-about-angulars-new-signal-forms/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-09-22T20:41:49+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "568ae21744f07d56",
      "title": "Full-Cycle Reactivity in Angular: Signal Forms, Signal Store, Resources, & Mutation API",
      "description": "Dies ist Beitrag 7 von 7 der Serie ‚ÄúNGRX Signal Store‚Äù The new NGRX Signal Store for Angular: 3 + 1 Flavors Smarter, Not Harder: Simplifying your Application With NGRX Signal Store and Custom Features NGRX Signal Store Deep Dive: Flexible and Type-Safe Custom Extensions The NGRX Signal Store and Your Architecture Using Angular&#8217;s Resource [&#8230;] The post Full-Cycle Reactivity in Angular: Signal Forms, Signal Store, Resources, &#038; Mutation API appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/full-cycle-reativity-in-angular-signal-forms-signal-store-resources-mutation-api/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-09-08T18:57:38+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "93f7081ae1bd3d3f",
      "title": "Cross-Repo Conformance with Nx Polygraph",
      "description": "While tech giants like Google and Facebook rely on monorepos, the reality for many companies is different: Business software is often developed in multiple project- or product-related repos. The relatively new Nx Polygraph takes this into account by visualizing dependencies between repos and enforcing common policies. In this article, I'll provide an overview of Polygraph [&#8230;] The post Cross-Repo Conformance with Nx Polygraph appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/cross-repo-conformance-with-nx-polygraph/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-08-10T21:57:51+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "7e5fe2204781b697",
      "title": "Interview: How AI Is Transforming Angular Development (Transcript)",
      "description": "Recently, I interviewed Daniel Sogl, who specializes in AI for software developers and has spoken about this very topic at various conferences. We discussed how our work will be influenced by AI in the short, mid, and long term: What tools are currently in your AI toolbox? The front-runner is clearly GitHub Copilot ‚Äì mainly [&#8230;] The post Interview: How AI Is Transforming Angular Development (Transcript) appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/interview-how-ai-is-transforming-angular-development-a-conversation-with-daniel/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-08-06T21:07:28+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "3d0a5db3a4d2a886",
      "title": "Native Federation Just Got Better: Performance, DX, and Simplicity",
      "description": "Dies ist Beitrag 6 von 6 der Serie ‚ÄúMicro Frontends with Modern Angular‚Äù Micro Frontends with Modern Angular &#8211; Part 1: Standalone and esbuild Micro Frontends with Modern Angular &#8211; Part 2: Multi-Version and Multi-Framework Solutions with Angular Elements and Web Components Combining Native Federation and Module Federation SSR and Hydration with Native Federation for [&#8230;] The post Native Federation Just Got Better: Performance, DX, and Simplicity appeared first on ANGULARarchitect",
      "url": "https://www.angulararchitects.io/blog/native-federation-just-got-better-performance-dx-and-simplicity/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-07-15T11:40:00+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "8bfc13357cab1ff9",
      "title": "Fixing DX Friction: Automatic Shell Reloading in Native Federation",
      "description": "Dies ist Beitrag 5 von 5 der Serie ‚ÄúMicro Frontends with Modern Angular‚Äù Micro Frontends with Modern Angular &#8211; Part 1: Standalone and esbuild Micro Frontends with Modern Angular &#8211; Part 2: Multi-Version and Multi-Framework Solutions with Angular Elements and Web Components Combining Native Federation and Module Federation SSR and Hydration with Native Federation for [&#8230;] The post Fixing DX Friction: Automatic Shell Reloading in Native Federation appeared first on ANGULARarchitect",
      "url": "https://www.angulararchitects.io/blog/fixing-dx-friction-automatic-shell-reloading-in-native-federation/",
      "source": "Angular Architects",
      "author": "Alejandro Ramirez",
      "published": "2025-07-14T10:49:34+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "b012054216e1b585",
      "title": "All about DDD for Angular & Frontend Architectures",
      "description": "Over the past few years, I've supported numerous companies in implementing large enterprise systems using Angular in the frontend. Due to their size and complexity, it's usually necessary to break such systems down into smaller, more manageable pieces. What sounds simple at first glance often proves extremely challenging in practice, because each possible division comes [&#8230;] The post All about DDD for Angular &#038; Frontend Architectures appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/all-about-ddd-for-frontend-architectures-with-angular-co/",
      "source": "Angular Architects",
      "author": "Manfred Steyer",
      "published": "2025-06-27T18:26:41+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "baf41b30de9cb32b",
      "title": "NG Best Practices: Prettier & ESLint",
      "description": "Dies ist Beitrag 2 von 2 der Serie ‚ÄúAngular Project Setup‚Äù The Perfect Project Setup for Angular: Structure and Automation for More Quality NG Best Practices: Prettier &#038; ESLint I consider myself a strict nerd when it comes to project rules, and I have a great need for clean, readable code. Hence, in this article, [&#8230;] The post NG Best Practices: Prettier &#038; ESLint appeared first on ANGULARarchitects.",
      "url": "https://www.angulararchitects.io/blog/best-practices-prettier-eslint/",
      "source": "Angular Architects",
      "author": "Alexander Thalhammer",
      "published": "2025-06-06T09:11:04+00:00",
      "niche": "angular",
      "score": 21,
      "keywords": []
    },
    {
      "id": "11b2507337b7c890",
      "title": "Breaking out of the comfort zone",
      "description": "The people that are used to read my articles will quickly realise that this is not the type of articles I generally write. Since I‚Äôm passionate about this subject, I‚Äôm going to write about it anyway. Bear with me, you might take away something from it. If not, at least you gave it a shot, right? I‚Äôm writing a book as we speak about my life and career as a software professional, not sure if I‚Äôll ever publish it, but consider this a very slimmed down version of some chapters of that book.",
      "url": "https://blog.brecht.io/breaking-out-of-the-comfort-zone/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-09-09T00:00:00+00:00",
      "niche": "angular",
      "score": 14,
      "keywords": []
    },
    {
      "id": "0108627ce36cf6ab",
      "title": "Why and how I created a SPA router for Qwik",
      "description": "The why",
      "url": "https://blog.brecht.io/why-and-how-i-created-a-spa-router-for-qwik/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2022-08-03T00:00:00+00:00",
      "niche": "angular",
      "score": 8,
      "keywords": []
    },
    {
      "id": "54652111b81ef13f",
      "title": "How covid affected StrongBrew",
      "description": "Covid",
      "url": "https://blog.brecht.io/how-covid-affected-strongbrew/",
      "source": "Brecht Blog",
      "author": "brechtbilliet",
      "published": "2020-11-03T00:00:00+00:00",
      "niche": "angular",
      "score": 8,
      "keywords": []
    }
  ]
}