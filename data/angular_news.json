{
  "last_updated": "2025-10-15T06:40:26.500663+00:00",
  "total_articles": 31,
  "articles": [
    {
      "id": "31d9b289aebc6f11",
      "title": "Angular‚Äôs Game-Changing Dynamic Component Features: inputBinding(), outputBinding(), and twoWayBinding()",
      "description": "Master the new APIs that make dynamic component creation cleaner, type-safe, and developer-friendly Ever struggled with creating dynamic components in Angular and wished there was a cleaner, more intuitive way? ü§î If you've been working with Angular's dynamic components using ComponentFactory or ViewContainerRef, you know the pain of verbose code, complex event handling, and the constant worry about memory leaks. Well, Angular 20 just dropped some absolute game-changers that will make you rethink",
      "url": "https://dev.to/codewithrajat/angulars-game-changing-dynamic-component-features-inputbinding-outputbinding-and-1aof",
      "source": "This is Angular",
      "author": "Rajat",
      "published": "2025-10-14T13:30:00+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "9ffe1f6d48482bd0",
      "title": "I built this to simplify date range selection in Angular 17+. If you‚Äôre an Angular dev, try it out and let me know what features you‚Äôd love next! Star it on GitHub if you‚Äôd like to support the project ‚ù§Ô∏è üîó https://github.com/toozuuu/ngxsmk-datepicker",
      "description": "Angular 20: De la programaci√≥n imperativa a la creaci√≥n declarativa de componentes din√°micos Antonio Cardenas for Angular Firebase „Éª Oct 9 #angular #webdev #spanish #frontend GitHub - toozuuu/ngxsmk-datepicker: A powerful, modern, highly customizable Angular date range picker with time component. A powerful, modern, highly customizable Angular date range picker with time component. - toozuuu/ngxsmk-datepicker github.com",
      "url": "https://dev.to/toozuuu/i-built-this-to-simplify-date-range-selection-in-angular-17-if-youre-an-angular-dev-try-it-out-4c26",
      "source": "This is Angular",
      "author": "Sachin Dilshan",
      "published": "2025-10-14T20:12:04+00:00",
      "niche": "angular",
      "score": 57,
      "keywords": []
    },
    {
      "id": "088918cde590521d",
      "title": "Master RxJS Error Handling Once and for All ‚Äî 3 Core Strategies You Should Know",
      "description": "As developers, we often focus too much on the happy path ‚Äî the perfect scenario where everything works smoothly and no API ever fails. But in the real world, one tiny error can derail your entire app from its destination. Error handling in RxJS is one of those underrated concepts that even experienced Angular devs struggle with. In this post (and the video linked below), I‚Äôll break down 3 core strategies that can help you design a clean, scalable, and resilient RxJS Error Handling Architecture. ",
      "url": "https://dev.to/frontdecoder/master-rxjs-error-handling-once-and-for-all-3-core-strategies-you-should-know-2e43",
      "source": "This is Angular",
      "author": "Seyed Amir Mehrizi",
      "published": "2025-10-14T07:45:46+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "74aa37d7737b4e38",
      "title": "Angular Component Lifecycle: Mastering the 11-Step Sequence (Code Examples Included)",
      "description": "\"As developers, we need precision. This guide details the exact 11-step lifecycle sequence of an Angular component, straight from the official docs. We'll show you when to check content vs. the view, why certain hooks run repeatedly, and the critical cleanup step to eliminate memory leaks.\" The Angular lifecycle is the engine of your application. Ignoring the proper order leads to runtime errors and performance issues. Let's look at the complete chain, focusing on the most critical distinctions.",
      "url": "https://dev.to/devhabib/angular-component-lifecycle-mastering-the-11-step-sequence-code-examples-included-24m8",
      "source": "This is Angular",
      "author": "Md Habibur Rahman",
      "published": "2025-10-14T05:54:42+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "0699de89915a1247",
      "title": "11 Best Angular Courses to Learn in 2026",
      "description": "The first time I opened the Angular docs, I felt completely lost. Components, services, observables, dependency injection ‚Äî it all seemed like too much just to build a simple UI. But once I built my first Angular dashboard that fetched live data from an API, it finally clicked. Angular wasn‚Äôt about quick hacks ‚Äî it was about structure, scalability, and patterns that make sense when large teams build apps together. In 2026, Angular remains one of the most reliable and in-demand frameworks in web ",
      "url": "https://dev.to/stack_overflowed/11-best-angular-courses-to-learn-in-2026-34me",
      "source": "This is Angular",
      "author": "Stack Overflowed",
      "published": "2025-10-14T05:21:28+00:00",
      "niche": "angular",
      "score": 52,
      "keywords": []
    },
    {
      "id": "2f8f72d71aec436a",
      "title": "Understanding app.config.ts in Angular 19 Standalone Applications ‚Äî A Complete Guide",
      "description": "In this article, we‚Äôll deep-dive into every line of a real-world app.config.ts file that integrates: Angular Standalone APIs PrimeNG theming (Lara theme) NgRx Store + Effects + DevTools HTTP Client with Fetch Markdown rendering (ngx-markdown + PrismJS highlighting) Zone optimization for better performance By the end, you‚Äôll understand how to structure, configure, and optimize your Angular 19 standalone app configuration file like a pro. The Complete app.config.ts Code Here‚Äôs the full configurati",
      "url": "https://dev.to/prateek_kr/understanding-appconfigts-in-angular-19-standalone-applications-a-complete-guide-5coh",
      "source": "This is Angular",
      "author": "Prateek Kr",
      "published": "2025-10-13T11:37:18+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "43940931d274cdce",
      "title": "Privacy, Data Handling, and Regulatory Compliance in Angular Applications",
      "description": "Modern web applications collect, process, and transmit significant amounts of user data. In Angular projects, developers must handle this data responsibly to comply with privacy regulations such as GDPR (General Data Protection Regulation) and CCPA (California Consumer Privacy Act). Beyond legal requirements, secure handling of personally identifiable information (PII) builds user trust and prevents reputational damage. This article explores best practices for privacy and compliance in Angular a",
      "url": "https://dev.to/lavi_kumar_2088/privacy-data-handling-and-regulatory-compliance-in-angular-applications-592f",
      "source": "This is Angular",
      "author": "Lavi Kumar",
      "published": "2025-10-13T06:43:00+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "543c3fb66401d41a",
      "title": "üÖ∞Ô∏è Angular Fundamentals: Mastering Component Communication with @Input and @Output",
      "description": "Component communication is a core skill for building scalable Angular applications. While there are many ways to share data (services, RxJS), the most fundamental and robust method for direct interaction between components is the Parent-Child pattern using @Input and @Output. This pattern enforces Unidirectional Data Flow, making your applications more predictable and easier to debug. 1. Passing Data Down: The @Input() Decorator The @Input() decorator allows a parent component to inject data int",
      "url": "https://dev.to/devhabib/angular-fundamentals-mastering-component-communication-with-input-and-output-177l",
      "source": "This is Angular",
      "author": "Md Habibur Rahman",
      "published": "2025-10-13T05:21:54+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "92bed099035343e6",
      "title": "What Building Employee Atlas Taught Me About Real Full Stack Development",
      "description": "Introduction Employee Atlas is an employee management application I built to help companies manage their teams more efficiently. The idea came from noticing how many workplaces still rely on spreadsheets or scattered tools to handle basic employee tasks. I wanted to create something that feels modern, centralized, and easy to use. With Employee Atlas, companies can hire or remove employees, review leave and clock in requests, and approve promotions or role changes without getting lost in paperwo",
      "url": "https://dev.to/haris_sejmenovic/what-building-employee-atlas-taught-me-about-real-full-stack-development-2a83",
      "source": "This is Angular",
      "author": "Haris Sejmenovic",
      "published": "2025-10-12T22:36:52+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "165256924cac00c1",
      "title": "üöÄ Unlocking Productivity: AI Tools Every Angular Developer Should Know",
      "description": "What if building Angular apps could be faster, easier, and more fun? Imagine having an AI coding assistant right by your side ‚Äî helping you avoid bugs, write cleaner code, and speed up your workflow. This article explores how AI is changing the game for Angular developers. From smart code suggestions to tools that catch errors before they become problems, AI is making Angular development smoother and more productive. Get ready to discover how these new tools and techniques can save time and make",
      "url": "https://dev.to/karol_modelski/unlocking-productivity-ai-tools-every-angular-developer-should-know-1fj",
      "source": "This is Angular",
      "author": "Karol Modelski",
      "published": "2025-10-12T07:00:00+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "8894a7c215aaf29b",
      "title": "Selectorless Components in Angular 20+: The Secret Agents of the Modern Framework",
      "description": "Hey Angular community! üëã I recently discovered something that changed how I think about Angular architecture: components don't need selectors anymore. This isn't just a clever trick - it represents Angular's evolution from a template-bound framework to a composition-first rendering engine. In this article, we'll explore: @Component({ standalone: true, // No selector! template: `I'm a free component!` }) Key takeaways: How Ivy enables this pattern Selectorless vs Services (crucial difference!) Re",
      "url": "https://dev.to/nurrehman/selectorless-components-in-angular-20-the-secret-agents-of-the-modern-framework-4dfk",
      "source": "This is Angular",
      "author": "Nadeem Ur-Rehman",
      "published": "2025-10-11T16:34:27+00:00",
      "niche": "angular",
      "score": 42,
      "keywords": []
    },
    {
      "id": "c15375530915247e",
      "title": "Angular support for generating apps in Google AI Studio is now available",
      "description": "Author: Mark (Techson) ThompsonWe‚Äôre overjoyed to announce that you can now generate Angular apps using the power of Google AI Studio.We know that developers are embracing AI and code generation as a part of their daily workflows. Whether it is generating code to prototype a new app experience for your users or getting help on your existing projects ‚Äî AI is there in the process. We want to ensure that Angular is in the places where developers are building.This was a collaborative effort between ",
      "url": "https://blog.angular.dev/angular-support-for-generating-apps-in-google-ai-studio-is-now-available-3a3afde38f58?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-10-02T17:43:53+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "3886cf9e367805ea",
      "title": "Beyond the Horizon: How Angular is Embracing AI for Next-Gen Apps",
      "description": "Author: Simona Cotin, Sr. Engineering Manager AngularWe hope you enjoyed watching the Angular + AI Developer event on YouTube where we were able to announce the new Web Codegen Scorer tool. This post goes more into details on how the tool came about and the story for Angular and generative AI in general.As developers like you embed artificial intelligence in their workflows, what does that mean for the framework? What does that mean for the future of development? While we can‚Äôt predict the futur",
      "url": "https://blog.angular.dev/beyond-the-horizon-how-angular-is-embracing-ai-for-next-gen-apps-7a7ed706e1a3?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-09-16T16:01:49+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "718038e272b5c7d1",
      "title": "Angular Summer Update 2025",
      "description": "Authors: Jens Kuehlers Mark TechsonAs summer reaches its peak, the Angular team wants to share some updates from the latest minor releases.Since launching Angular v20 in May, the team has been hard at work shipping new features and improvements in v20.1 and v20.2. We are continuing our mission to boost developer productivity and help you create apps your users will love. As part of that mission, we‚Äôve also expanded our AI offerings to enhance your development workflow.HighlightsZoneless APIs are",
      "url": "https://blog.angular.dev/angular-summer-update-2025-1987592a0b42?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-08-29T20:51:40+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "56527af29db0113b",
      "title": "The Angular Custom Profiling Track is now available",
      "description": "Authors: Mark Thompson Pawel KozlowskiProfiling web applications can be a complex task, often requiring developers to juggle between different tools that present data in disconnected ways. Traditionally, Chrome‚Äôs performance panel is excellent for detailed function call analysis, while Angular DevTools offers a higher-level view based on framework concepts like components, lifecycle hooks, bindings etc. Unfortunately, having two separate tools leads to a fragmented understanding of performance.T",
      "url": "https://blog.angular.dev/the-angular-custom-profiling-track-is-now-available-0f9d8d36218a?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-07-02T19:38:06+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "6b1ac8d3070244b9",
      "title": "Announcing Angular v20",
      "description": "The past couple of years have been transformative for Angular, as we‚Äôve unleashed major advancements like reactivity with Signals and the power of Zoneless applications. We hope these features have helped the Angular community build the next generation of web applications with fast time-to-market and robust performance.And we are just getting started! Angular v20 is our latest release where we have spent countless hours polishing some of our in-progress features for the rock-solid developer expe",
      "url": "https://blog.angular.dev/announcing-angular-v20-b5c9c06cf301?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Minko Gechev",
      "published": "2025-05-28T18:33:28+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "ba401f03af1eb9aa",
      "title": "Build AI-Powered Apps With Genkit and Angular",
      "description": "There has never been a better time to start building with AI and the state-of-the-art models available to developers everywhere. Building with AI is for everyone, especially web developers. The Firebase team at Google has just launched the 1.0 version of Genkit for Node.js which means that it is ready for production and ready to help you build the next generation of AI powered applications.What is Genkit?Genkit is a framework designed to help you build AI-powered applications and features. It pr",
      "url": "https://blog.angular.dev/build-ai-powered-apps-with-genkit-and-angular-707db8918c3a?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-03-18T03:15:07+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "f90fe0ed517f862d",
      "title": "Seamless data fetching with httpResource",
      "description": "Photo by Jamie Street on UnsplashFantastic new APIs are coming to Angular. Two years ago, we proposed making Angular a reactive web framework powered by signals. Since then, the team has shipped a number of signal-based features in the framework: reactive primitives like signal & computed, reactive inputs including model, signal queries, bidirectional RxJS conversion utilities, and migration tooling.We have a solid foundation for reactivity in Angular. Now, we‚Äôre ready to begin the next phase of",
      "url": "https://blog.angular.dev/seamless-data-fetching-with-httpresource-71ba7c4169b9?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Matthieu Riegler",
      "published": "2025-03-07T15:02:52+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "176bceba64e5c319",
      "title": "Angular 19.2 Is Now Available",
      "description": "And we‚Äôre back with Angular‚Äôs latest minor release, version 19.2, bringing new APIs and experimental features to empower developers on their next great app.Expanding reactivity beyond synchronousIn Angular v19 we released the experimental resource API, continuing our reactivity story to a new chapter ‚Äî asynchronous reactivity.With this release, we‚Äôre thrilled to introduce two significant updates: asynchronous reactivity with the new httpResource and resource streaming with rxResource APIs.Develo",
      "url": "https://blog.angular.dev/angular-19-2-is-now-available-673ec70aea12?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Angular",
      "published": "2025-03-05T16:55:07+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "98679d8cec292720",
      "title": "Micro Frontends with Angular and Native Federation",
      "description": "Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care of.There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder str",
      "url": "https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Manfred Steyer",
      "published": "2025-02-10T15:02:31+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "3357b3beaf480b78",
      "title": "Angular 2025 Strategy",
      "description": "For the past two and a half years, we‚Äôve been laser focused on improving developer experience and performance for all Angular developers. In this post, I‚Äôd like to share a brief summary of the high-level process that we‚Äôve been following to achieve this and describe our strategy for 2025.The tech industry evolves rapidly. For example, it was hard to predict the magnitude of the GenAI revolution until a couple of years ago. This makes it very difficult and impractical to create a fixed plan for A",
      "url": "https://blog.angular.dev/angular-2025-strategy-9ca333dfc334?source=rss----447683c3d9a3---4",
      "source": "Angular Blog (Official)",
      "author": "Minko Gechev",
      "published": "2025-01-14T00:01:41+00:00",
      "niche": "angular",
      "score": 32,
      "keywords": []
    },
    {
      "id": "89b3e6889637a899",
      "title": "Angular Performance Tuning: Complete Guide To Bundle Size Optimization",
      "description": "Learn everything you need to know about Angular performance tuning: how to generate a bundle performance profile, and how to split up your application into smaller chunks via standalone lazy-loading and partial template loading.",
      "url": "https://blog.angular-university.io/angular-performance-tuning/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-02-22T14:43:38+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "e3946bdba43468e0",
      "title": "Angular 17.2 Is Out: What's New?",
      "description": "A complete guide to the brand new Angular 17.2 features, including: the new signal-based view queries viewChild, viewChildren, contentChild, and contentChildren, as well the new model() two-way binding mechanism.",
      "url": "https://blog.angular-university.io/angular-17-2-release/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-02-16T15:25:58+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "f6563f5ef4fe182f",
      "title": "Angular innerHTML and DomSanitizer: Complete Guide",
      "description": "A complete guide on how to use innerHTML and the DomSanitizer service in Angular for direct HTML injection, including the design and implementation of a reusable SafeHtml pipe that simplifies the whole process.",
      "url": "https://blog.angular-university.io/angular-innerhtml/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-02-13T09:17:26+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "bc994493cfcaae17",
      "title": "Angular Loading Indicator: Complete Guide",
      "description": "A complete hands-on guide on how to build a loading indicator in Angular. The spinner will accept a customizable UI via content projection, and it will be integrated with the router. We will use an HTTP interceptor to turn it on for backend requests.",
      "url": "https://blog.angular-university.io/angular-loading-indicator/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-01-17T17:49:51+00:00",
      "niche": "angular",
      "score": 27,
      "keywords": []
    },
    {
      "id": "2ad8c7a4ce369d0c",
      "title": "Angular linkedSignal(): The Missing Link in Signal-Based Reactivity",
      "description": "Angular‚Äôs linkedSignal is a key addition to the Angular Signals API - it enables certain edge cases to be easily implemented with signals in a much more reactive and declarative way.",
      "url": "https://blog.angular-university.io/angular-linkedsignal/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2025-03-14T17:11:07+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    },
    {
      "id": "9324897093602a8d",
      "title": "Angular Signal Queries: viewChild, contentChild, viewChildren, contentChildren (Complete Guide)",
      "description": "A super-detailed guide to the new Angular signal queries: viewChild(), viewChildren, contentChild() and contentChildren().",
      "url": "https://blog.angular-university.io/angular-viewchild-contentchild/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-05-27T07:45:31+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    },
    {
      "id": "bef4e897810a09e1",
      "title": "Angular Signals Component API: input, output, model (Complete Guide)",
      "description": "A complete guide to Angular signal components, the new component authoring format. This includes signal-based inputs, outputs, and two-way binding with model().",
      "url": "https://blog.angular-university.io/angular-signal-components/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-05-02T07:15:40+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    },
    {
      "id": "4a52202dfbfd6045",
      "title": "Angular 17.1 Is Out: What's New? (Top 8 New Features)",
      "description": "The Angular 17.1 release is out. Let's do a quick summary of all its major features, with an emphasis on int's major new feature: signal inputs.",
      "url": "https://blog.angular-university.io/angular-17-1-release/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-01-29T12:47:57+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    },
    {
      "id": "f893f8a1267395f0",
      "title": "Angular Signal Inputs: Complete Guide to input()",
      "description": "A complete guided tour of Angular Signal Inputs, covering how they compare to the @Input decorator, and how they help make the OnChanges lifecycle hook less needed.",
      "url": "https://blog.angular-university.io/angular-signal-inputs/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-01-26T12:04:52+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    },
    {
      "id": "6b7bc50483cad5d1",
      "title": "Angular @Output: Complete Guide",
      "description": "A complete guide to the Angular @Output decorator and EventEmitter. Learn how to use @Output to emit custom component events, and avoid a common misunderstanding regarding its use.",
      "url": "https://blog.angular-university.io/angular-output/",
      "source": "Angular University",
      "author": "Angular University",
      "published": "2024-01-17T13:35:23+00:00",
      "niche": "angular",
      "score": 24,
      "keywords": []
    }
  ]
}